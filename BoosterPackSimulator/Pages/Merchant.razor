@page "/merchant"
@inject IJSRuntime JSR
@inject NavigationManager NavManager
@inject HttpClient Http

<PageTitle>Merchant</PageTitle>

<h1 class="main-header header">Product Merchant</h1>

<div >
    

    <p>It wouldn't <i>really</i> be opening fake boosters if you didn't fake buy them with fake money.  Just don't take a fake loan out on your fake house to feed your fake addiction for it, please.  Think of your fake family (no not that one).</p>

</div>

@if(game != null)
{
    @foreach (var set in game.Sets)
    {
        <div>
        <h2 class="product-header header">@set.Name</h2>

        @foreach(var product in game.GetAllNonCardProductForSet(set.SetNum))
        {
            <div>
                <div>@product.Name</div>
                <img src="images/@product.Filename">
                <button @onclick="() => Purchase(product)">Buy</button>
                <div>Qty Owned: 
                    @if(@collection.OwnedProducts.ContainsKey(product.Name))
                    {
                        @collection.OwnedProducts[product.Name]
                    }
                    else
                    {
                        <span>0</span>
                    }
                </div>
                
            </div>
        }
        </div>
    }
}

<p>Total Spent: @FormattedTotal</p>


@code {

    private BrowserStorageAccessor BSA;

    protected override async Task OnInitializedAsync()
    {

        BSA = new(JSR, Http);

        game = await BSA.ReadBS<GameDefinition>();
        if(game == null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        collection = await BSA.ReadBS<CollectionManager>();

        if(collection == null)
        {
            collection = new CollectionManager();
            await BSA.SaveBS(collection);
        }
        base.OnInitialized();
    }

    private GameDefinition? game;

    public async Task Purchase(IProduct product)
    {
        await collection.PurchaseItem(product);
        await BSA.SaveBS(collection);
        StateHasChanged();
    }

    private float total;
    public string FormattedTotal => collection?.TotalSpending.ToString("C") ?? "$0";
    private CollectionManager? collection;






    //protected override async Task OnInitializedAsync() => await Index.CheckData();
}
