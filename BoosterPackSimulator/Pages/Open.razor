@page "/open"
@inject IJSRuntime JSR
@inject HttpClient Http

<PageTitle>Booster Opening</PageTitle>


<div class="product-selection">
    @if (Collection != null)
    {
        @foreach (var item in Items.Values)
        {
            @if(item.Quantity <= 0)
                continue;

            <div class="product-item @(item.Selected ? "product-selected" : "")" id="@item.ID">
                <button class="product-button" @onclick="() => SelectNewProduct(item.ID)"></button>
                <figure>
                    <img src="/images/@item.Filename"/>
                    <figcaption>@item.ID <b>x @item.Quantity</b></figcaption>
                </figure>
            </div>
        }

    }
</div>

<div>
    <img src="https://wiki.lotrtcgpc.net/images/LOTR-EN02S051.0_card.jpg" />
</div>


<div></div>



@*<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@

@code {

    private BrowserStorageAccessor BSA;

    protected override async Task OnInitializedAsync()
    {

        BSA = new(JSR, Http);

        Collection = await BSA.ReadOrCreateBS<CollectionManager>();
        GameDef = await BSA.ReadOrCreateBS<GameDefinition>();

        foreach(var name in Collection.OwnedProducts.Keys)
        {
            Items.Add(name, new ProductItemInfo(name, Collection.OwnedProducts[name], GameDef.FindProduct(name).Filename));
        }


        base.OnInitialized();
    }

    private CollectionManager Collection;
    private GameDefinition GameDef;

    public string? SelectedProduct = null;

    public class ProductItemInfo
    {
        public string ID;
        public string Filename;
        public bool Selected;
        public int Quantity;

        public ProductItemInfo(string id, int quantity, string file)
        {
            ID = id;
            Quantity = quantity;
            Filename = file;
            Selected = false;
        }
    }

    private Dictionary<string, ProductItemInfo> Items = new Dictionary<string, ProductItemInfo>();

    public void SelectNewProduct(string productName)
    {
        if(SelectedProduct != null)
        {
            Items[SelectedProduct].Selected = false;
        }

        SelectedProduct = productName;
        Items[SelectedProduct].Selected = true;
        StateHasChanged();
    }


    //protected override async Task OnInitializedAsync() => await Index.CheckData();
}

<style>
    .product-selection {
        border: solid;
        border-color: #AAAAAA;
        border-width: 3px;
        min-height: 200px;
        min-width: 50px;
        margin: 1em;
        padding: 1em;

        display:flex;
        align-items: stretch;
        overflow: auto;
    }

    .product-item {
        position: relative;
        border: dotted;
        border-color: #00000000;
        flex: none;
    }

    .product-item:hover {
        border: dotted;
        border-color: #88888888;
    }

    .product-item.product-selected:hover {
        border: dashed;
    }

    .product-button {
        position:absolute;
        width:100%;
        height:100%;

        background: transparent;
        border: none !important;
        font-size:0;
    }

    .product-selected {
        border: dashed;
    }

    img {
        max-height: 200px;
        max-width: 200px; 
    }

    figure {
        display: table;
        width: 1px;
        height: 100%;
        margin: 0;
    }
    figure.img, figcaption {
        display: table-row;
        margin: auto;
        vertical-align: bottom;
    }

    figcaption {
        height: 4em;
    }

</style>
