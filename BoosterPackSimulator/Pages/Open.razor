@page "/open"
@inject IJSRuntime JSR
@inject HttpClient Http

<PageTitle>Booster Opening</PageTitle>


<div class="product-selection">
    @if (Collection != null)
    {
        @foreach (var item in Items.Values)
        {
            @if(item.Quantity <= 0)
                continue;

            <div class="product-item @(item.Selected ? "product-selected" : "")" id="@item.ID">
                <button class="product-button" @onclick="() => SelectNewProduct(item.ID)"></button>
                <figure>
                    <img src="/images/@item.Filename"/>
                    <figcaption>@item.ID <b>x @item.Quantity</b></figcaption>
                </figure>
            </div>
        }

        @if(!Items.Any(x => x.Value.Quantity > 0))
        {
            <i>No products purchased!  Go to the <a href="/merchant">Merchant tab</a> and buy some!</i>
        }

    }
</div>

<button @onclick="OpenProduct">Open</button>

<div class="card-display">

    @foreach(var card in Cards)
    {
        <img src ="@(GameDef.BaseURL + card.Filename)" />
    }
</div>


<div></div>



@*<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@

@code {

    private BrowserStorageAccessor BSA;

    protected override async Task OnInitializedAsync()
    {

        BSA = new(JSR, Http);

        Collection = await BSA.ReadOrCreateBS<CollectionManager>();
        GameDef = await BSA.ReadOrCreateBS<GameDefinition>();
        PackHandler = await BSA.ReadOrCreateBS<PackHandler>();

        foreach(var product in GameDef.GetAllNonCardProduct())
        {
            int quantity = 0;
            if(Collection.OwnedProducts.ContainsKey(product.Name))
            {
                quantity = Collection.OwnedProducts[product.Name];
            }
            Items.Add(product.Name, new ProductItemInfo(product.Name, quantity, product.Filename));
        }


        base.OnInitialized();
    }

    private CollectionManager Collection;
    private GameDefinition GameDef;
    private PackHandler PackHandler;

    public string? SelectedProduct = null;

    public class ProductItemInfo
    {
        public string ID;
        public string Filename;
        public bool Selected;
        public int Quantity;

        public ProductItemInfo(string id, int quantity, string file)
        {
            ID = id;
            Quantity = quantity;
            Filename = file;
            Selected = false;
        }
    }

    private Dictionary<string, ProductItemInfo> Items = new Dictionary<string, ProductItemInfo>();

    private List<CardDefinition> Cards = new List<CardDefinition>();

    public void SelectNewProduct(string? productName)
    {

        if(SelectedProduct != null)
        {
            Items[SelectedProduct].Selected = false;
        }
        if (productName == null)
            return;

        SelectedProduct = productName;
        Items[SelectedProduct].Selected = true;
        StateHasChanged();
    }

    public async Task OpenProduct()
    {
        if(SelectedProduct == null)
            return;
        if (!Items.ContainsKey(SelectedProduct))
            return;

        var product = GameDef.FindProduct(SelectedProduct);
        if (product == null)
            return;


        switch(product.ProductType)
        {
            case ProductType.Case:
                var Case = product as DisplayCaseDefinition;
                if (Case == null)
                    break;

                string boxName = Case.DisplayBox.Name;

                if(!Items.ContainsKey(boxName))
                {
                    Items.Add(boxName, new ProductItemInfo(boxName, 0, Case.DisplayBox.Filename));
                }

                Items[boxName].Quantity += Case.Count;

                Items[SelectedProduct].Quantity -= 1;

                Collection.OwnedProducts[SelectedProduct] = Items[SelectedProduct].Quantity;
                Collection.OwnedProducts[boxName] = Items[boxName].Quantity;

                break;

            case ProductType.Box:
                var box = product as DisplayBoxDefinition;
                if (box == null)
                    break;

                string packName = box.BoosterDefinition.Name;

                if(!Items.ContainsKey(packName))
                {
                    Items.Add(packName, new ProductItemInfo(packName, 0, box.BoosterDefinition.Filename));
                }

                Items[packName].Quantity += box.Count;

                Items[SelectedProduct].Quantity -= 1;

                Collection.OwnedProducts[SelectedProduct] = Items[SelectedProduct].Quantity;
                Collection.OwnedProducts[packName] = Items[packName].Quantity;

                break;
            case ProductType.Booster:
                var booster = product as BoosterDefinition;
                if (booster == null)
                    break;

                Cards.Clear();

                var set = GameDef.Sets.Values.First(x => x.Name == booster.SetName);
                if (set == null)
                    break;

                var randomizer = GetOrMakeRandomizer(booster);

                foreach(var card in randomizer.GetNextBooster())
                {
                    Cards.Add(card);
                    Collection.AddCard(card);
                }

                Items[SelectedProduct].Quantity -= 1;

                Collection.OwnedProducts[SelectedProduct] = Items[SelectedProduct].Quantity;

                break;
        }

        await BSA.SaveBS(Collection);

        CheckSelected();

        StateHasChanged();
    }

    private PackRandomizer GetOrMakeRandomizer(BoosterDefinition boosterDef)
    {
        if (PackHandler.Randomizers.ContainsKey(boosterDef.Name))
            return PackHandler.Randomizers[boosterDef.Name];

        var randomizer = new PackRandomizer(GameDef, boosterDef, null);
        PackHandler.Randomizers.Add(boosterDef.Name, randomizer);
        BSA.SaveBS(PackHandler);
        return randomizer;
    }

    private void CheckSelected()
    {
        if(Items[SelectedProduct].Quantity <= 0)
        {
            Items[SelectedProduct].Selected = false;

            var candidate = Items.FirstOrDefault(x => x.Key.Substring(0, 7) == x.Key.Substring(0, 7) && x.Value.Quantity > 0);
            if(default(KeyValuePair<string,ProductItemInfo>).Equals(candidate))
            {
                candidate = Items.FirstOrDefault(x => x.Value.Quantity > 0);
            }

            if(default(KeyValuePair<string,ProductItemInfo>).Equals(candidate))
            {
                SelectNewProduct(null);
            }
            else
            {
                SelectNewProduct(candidate.Key);
            }
        }
    }


    //protected override async Task OnInitializedAsync() => await Index.CheckData();
}

<style>
    .product-selection {
        border: solid;
        border-color: #AAAAAA;
        border-width: 3px;
        min-height: 200px;
        min-width: 50px;
        margin: 1em;
        padding: 1em;

        display:flex;
        align-items: stretch;
        overflow: auto;
    }

    .product-item {
        position: relative;
        border: dotted;
        border-color: #00000000;
        flex: none;
    }

    .product-item:hover {
        border: dotted;
        border-color: #88888888;
    }

    .product-item.product-selected:hover {
        border: dashed;
    }

    .product-button {
        position:absolute;
        width:100%;
        height:100%;

        background: transparent;
        border: none !important;
        font-size:0;
    }

    .product-selected {
        border: dashed;
    }

    img {
        max-height: 300px;
        max-width: 300px; 
    }

    figure {
        display: table;
        width: 1px;
        height: 100%;
        margin: 0;
    }
    figure.img, figcaption {
        display: table-row;
        margin: auto;
        vertical-align: bottom;
    }

    figure.img {
        max-height: 200px;
        max-width: 200px; 
    }

    figcaption {
        height: 4em;
    }

</style>
